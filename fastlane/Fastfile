# This file contains the fastlane.tools configuration
# Documentation: https://docs.fastlane.tools

# Uncomment the line below to enable Fastlane auto-update
# update_fastlane

BUILD_CONFIG_DEBUG = "debug"
BUILD_CONFIG_RELEASE = "release"

default_platform(:android)

platform :android do
  #*************************************************************************************************
  # [ FIREBASE DISTRIBUTION LANES ]
  #*************************************************************************************************
  desc "Firebase distribute Debug"
  lane :firebase_distribute_debug do
    distribute_firebase(build_type: BUILD_CONFIG_DEBUG)
  end

  desc "Firebase distribute Release"
  lane :firebase_distribute_release do
    distribute_firebase(build_type: BUILD_CONFIG_RELEASE)
  end

  #*************************************************************************************************
  # [ BUILD FUNCTION ]
  #*************************************************************************************************
  def build(flavor:, build_type:, firebase_app_id:)
    # Retrieve the latest release from Firebase
    latest_release = firebase_app_distribution_get_latest_release(
      app: firebase_app_id,
      firebase_cli_token: ENV['FIREBASE_CLI_TOKEN']
    )

    if latest_release && latest_release.key?(:buildVersion)
      version_code = latest_release[:buildVersion].to_i + 1
      UI.message("Incrementing version code to #{version_code}")

      increment_version_code(
        gradle_file_path: "app/build.gradle.kts",
        version_code: version_code
      )
    else
      UI.message("Could not fetch the latest release or :buildVersion. Skipping version code increment.")
    end

    # Build the APK or AAB
    gradle(
      task: "assemble",
      flavor: flavor,
      build_type: build_type
    )
    UI.message("Build completed for flavor: #{flavor}, build type: #{build_type}.")
  end

  #*************************************************************************************************
  # [ DISTRIBUTE FIREBASE ]
  #*************************************************************************************************
  def distribute_firebase(build_type:)
    # Fetch flavors from the environment variables
    flavors = ENV['FLAVORS']&.split(',') || [ENV['FLAVOR']].compact

    if flavors.empty?
      UI.user_error!("Environment variable 'FLAVORS' or 'FLAVOR' is not set. Please define one in the environment.")
    end

    # Firebase App IDs for each flavor
    firebase_app_ids = {
      "CoreApp" => "1:175826017823:android:23c3f0a529fbaf99b4bf2a", # CoreApp: com.love.fastlanepro
      "FoxApp" => "1:175826017823:android:18f784ba7b25cc4fb4bf2a",  # FoxApp: com.love.fastlanepro.fox
      "MaxApp" => "1:175826017823:android:13c08153d956ebceb4bf2a"   # MaxApp: com.love.fastlanepro.max
    }

    valid_flavors = firebase_app_ids.keys

    invalid_flavors = flavors - valid_flavors

    unless invalid_flavors.empty?
      UI.user_error!("Invalid flavors '#{invalid_flavors.join(', ')}'. Valid flavors are: #{valid_flavors.join(', ')}")
    end

    # Iterate through each valid flavor and build/distribute
    flavors.each do |flavor|
      UI.message("Building and distributing for flavor: #{flavor}")

      # Build the app
      build(
        flavor: flavor,
        build_type: build_type,
        firebase_app_id: firebase_app_ids[flavor]
      )

      # Distribute via Firebase
      firebase_app_distribution(
        app: firebase_app_ids[flavor],
        firebase_cli_token: ENV['FIREBASE_CLI_TOKEN'],
        groups: "dev-group, testing-group",
        release_notes: firebase_release_notes(flavor: flavor),
        debug: true,
        upload_timeout: 600 # Set timeout to 10 minutes
      )

      # Notify Slack
      slack_new_build(build_type: build_type, flavor: flavor)
    end
  end

  #*************************************************************************************************
  # [ SLACK NOTIFICATIONS ]
  #*************************************************************************************************
  def slack_new_build(build_type:, flavor:)
    notes = ":rocket: *New Android Build!* \n" \
            "*App Name:* #{ENV['APP_NAME']}\n" \
            "*Flavor:* #{flavor}\n" \
            "*Build Type:* #{build_type}\n" \
            "*Version:* #{current_version_name} (#{current_version_code})\n" \
          #  "*Release Notes:*\n#{release_notes}"

    slack(
      message: notes,
      success: true,
      slack_url: ENV['SLACK_URL'],
      payload: {
        "Release Notes" => release_notes,
        "Branch Name" => git_branch
      },
      default_payloads: [],
      attachment_properties: {
        fallback: "New Build notification",
        author_name: "Ahmed Aly",
        author_link: "https://github.com/eng-ahmed-younis",
        author_icon: "https://yt3.googleusercontent.com/Z497e8KyOPp-YwpldzDQ0Th2DbUOkKvIuLqbRY1WImt-mqFTfSMFYcoNshI5pzFZGANWuZGfckQ=s900-c-k-c0x00ffffff-no-rj",
        color: "#36a64f",
       # title: "Build Information",
      #  text: "Flavor: #{flavor}\nBuild Type: #{build_type}\nVersion: #{current_version_name} (#{current_version_code})",
        footer: "Fastlane CI/CD",
        thumb_url: "http://placekitten.com/g/200/200",
        footer_icon: "https://platform.slack-edge.com/img/default_application_icon.png",
        ts: Time.now.to_i
      }
    )
  end

  #*************************************************************************************************
  # [ RELEASE NOTES HELPERS ]
  #*************************************************************************************************
  def firebase_release_notes(flavor:)
    "#{ENV['APP_NAME']} - #{flavor}\n\n#{release_notes}"
  end

  def release_notes
    File.exist?("./release_notes") ? File.read("./release_notes") : "No release notes provided."
  end

  #*************************************************************************************************
  # [ VERSION HELPERS ]
  #*************************************************************************************************
  def current_version_name
    get_version_name(
      gradle_file_path: "app/build.gradle.kts",
      ext_constant_name: "versionName"
    )
  end

  def current_version_code
    get_version_code(
      gradle_file_path: "app/build.gradle.kts",
      ext_constant_name: "versionCode"
    )
  end
end
